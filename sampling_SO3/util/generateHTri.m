function [H, wedge_TRI, tile] = generateHTri()

H = struct ('R', 0, 'n', 0, 'theta', 0);

H(1).R = [-1.0, 0.0, 0.0; 0.0, -1.0, 0.0; 0.0, 0.0, 1.0]; % selbstinvers
H(2).R = [-1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, -1.0]; % selbstinvers
H(3).R = [-0.5, -0.809016994374947, -0.309016994374947; -0.809016994374947, 0.309016994374947, 0.5; -0.309016994374947, 0.5, -0.809016994374947]; % selbstinvers
H(4).R = [-0.5, -0.809016994374947, -0.309016994374947; 0.809016994374947, -0.309016994374947, -0.5; 0.309016994374947, -0.5, 0.809016994374947]; % invers zu 9
H(5).R = [-0.5, -0.809016994374947, 0.309016994374947; -0.809016994374947, 0.309016994374947, -0.5; 0.309016994374947, -0.5, -0.809016994374947]; % selbstinvers
H(6).R = [-0.5, -0.809016994374947, 0.309016994374947; 0.809016994374947, -0.309016994374947, 0.5; -0.309016994374947, 0.5, 0.809016994374947]; % invers zu 7
H(7).R = [-0.5, 0.809016994374947, -0.309016994374947; -0.809016994374947, -0.309016994374947, 0.5; 0.309016994374947, 0.5, 0.809016994374947]; % invers zu 6
H(8).R = [-0.5, 0.809016994374947, -0.309016994374947; 0.809016994374947, 0.309016994374947, -0.5; -0.309016994374947, -0.5, -0.809016994374947]; % selbstinvers
H(9).R = [-0.5, 0.809016994374947, 0.309016994374947; -0.809016994374947, -0.309016994374947, -0.5; -0.309016994374947, -0.5, 0.809016994374947]; % invers zu 4
H(10).R = [-0.5, 0.809016994374947, 0.309016994374947; 0.809016994374947, 0.309016994374947, 0.5; 0.309016994374947, 0.5, -0.809016994374947]; % selbstinvers
H(11).R = [0.0, -1.0, 0.0; 0.0, 0.0, -1.0; 1.0, 0.0, 0.0]; % invers zu 15
H(12).R = [0.0, -1.0, 0.0; 0.0, 0.0, 1.0; -1.0, 0.0, 0.0]; % invers zu 13
H(13).R = [0.0, 0.0, -1.0; -1.0, 0.0, 0.0; 0.0, 1.0, 0.0]; % invers zu 12
H(14).R = [0.0, 0.0, -1.0; 1.0, 0.0, 0.0; 0.0, -1.0, 0.0]; % invers zu 17
H(15).R = [0.0, 0.0, 1.0; -1.0, 0.0, 0.0; 0.0, -1.0, 0.0]; % invers zu 11
H(16).R = [0.0, 0.0, 1.0; 1.0, 0.0, 0.0; 0.0, 1.0, 0.0]; % invers zu 18
H(17).R = [0.0, 1.0, 0.0; 0.0, 0.0, -1.0; -1.0, 0.0, 0.0]; % invers zu 14
H(18).R = [0.0, 1.0, 0.0; 0.0, 0.0, 1.0; 1.0, 0.0, 0.0]; % invers zu 16
H(19).R = [0.5, -0.809016994374947, -0.309016994374947; -0.809016994374947, -0.309016994374947, -0.5; 0.309016994374947, 0.5, -0.809016994374947]; % invers zu 21
H(20).R = [0.5, -0.809016994374947, -0.309016994374947; 0.809016994374947, 0.309016994374947, 0.5; -0.309016994374947, -0.5, 0.809016994374947]; % invers zu 23
H(21).R = [0.5, -0.809016994374947, 0.309016994374947; -0.809016994374947, -0.309016994374947, 0.5; -0.309016994374947, -0.5, -0.809016994374947]; % invers zu 19
H(22).R = [0.5, -0.809016994374947, 0.309016994374947; 0.809016994374947, 0.309016994374947, -0.5; 0.309016994374947, 0.5, 0.809016994374947]; % invers zu 25
H(23).R = [0.5, 0.809016994374947, -0.309016994374947; -0.809016994374947, 0.309016994374947, -0.5; -0.309016994374947, 0.5, 0.809016994374947]; % invers zu 20
H(24).R = [0.5, 0.809016994374947, -0.309016994374947; 0.809016994374947, -0.309016994374947, 0.5; 0.309016994374947, -0.5, -0.809016994374947]; % invers zu 26
H(25).R = [0.5, 0.809016994374947, 0.309016994374947; -0.809016994374947, 0.309016994374947, 0.5; 0.309016994374947, -0.5, 0.809016994374947]; % invers zu 22
H(26).R = [0.5, 0.809016994374947, 0.309016994374947; 0.809016994374947, -0.309016994374947, -0.5; -0.309016994374947, 0.5, -0.809016994374947]; % invers zu 24
H(27).R = [1.0, 0.0, 0.0; 0.0, -1.0, 0.0; 0.0, 0.0, -1.0]; % selbstinvers
H(28).R = [1.0, 0.0, 0.0; 0.0, 1.0, 0.0; 0.0, 0.0, 1.0]; % selbstinvers
H(29).R = [-0.809016994374947, -0.309016994374947, -0.5; -0.309016994374947, -0.5, 0.809016994374947; -0.5, 0.809016994374947, 0.309016994374947]; % selbstinvers
H(30).R = [-0.809016994374947, -0.309016994374947, -0.5; 0.309016994374947, 0.5, -0.809016994374947; 0.5, -0.809016994374947, -0.309016994374947]; % invers zu 35
H(31).R = [-0.809016994374947, -0.309016994374947, 0.5; -0.309016994374947, -0.5, -0.809016994374947; 0.5, -0.809016994374947, 0.309016994374947]; % selbstinvers
H(32).R = [-0.809016994374947, -0.309016994374947, 0.5; 0.309016994374947, 0.5, 0.809016994374947; -0.5, 0.809016994374947, -0.309016994374947]; % invers zu 33
H(33).R = [-0.809016994374947, 0.309016994374947, -0.5; -0.309016994374947, 0.5, 0.809016994374947; 0.5, 0.809016994374947, -0.309016994374947]; % invers zu 32
H(34).R = [-0.809016994374947, 0.309016994374947, -0.5; 0.309016994374947, -0.5, -0.809016994374947; -0.5, -0.809016994374947, 0.309016994374947]; % selbstinvers
H(35).R = [-0.809016994374947, 0.309016994374947, 0.5; -0.309016994374947, 0.5, -0.809016994374947; -0.5, -0.809016994374947, -0.309016994374947]; % invers zu 30
H(36).R = [-0.809016994374947, 0.309016994374947, 0.5; 0.309016994374947, -0.5, 0.809016994374947; 0.5, 0.809016994374947, 0.309016994374947]; % selbstinvers
H(37).R = [-0.309016994374947, -0.5, -0.809016994374947; -0.5, 0.809016994374947, -0.309016994374947; 0.809016994374947, 0.309016994374947, -0.5]; % invers zu 39
H(38).R = [-0.309016994374947, -0.5, -0.809016994374947; 0.5, -0.809016994374947, 0.309016994374947; -0.809016994374947, -0.309016994374947, 0.5]; % invers zu 41
H(39).R = [-0.309016994374947, -0.5, 0.809016994374947; -0.5, 0.809016994374947, 0.309016994374947; -0.809016994374947, -0.309016994374947, -0.5]; % invers zu 37
H(40).R = [-0.309016994374947, -0.5, 0.809016994374947; 0.5, -0.809016994374947, -0.309016994374947; 0.809016994374947, 0.309016994374947, 0.5]; % invers zu 43
H(41).R = [-0.309016994374947, 0.5, -0.809016994374947; -0.5, -0.809016994374947, -0.309016994374947; -0.809016994374947, 0.309016994374947, 0.5]; % invers zu 38
H(42).R = [-0.309016994374947, 0.5, -0.809016994374947; 0.5, 0.809016994374947, 0.309016994374947; 0.809016994374947, -0.309016994374947, -0.5]; % invers zu 44
H(43).R = [-0.309016994374947, 0.5, 0.809016994374947; -0.5, -0.809016994374947, 0.309016994374947; 0.809016994374947, -0.309016994374947, 0.5]; % invers zu 40
H(44).R = [-0.309016994374947, 0.5, 0.809016994374947; 0.5, 0.809016994374947, -0.309016994374947; -0.809016994374947, 0.309016994374947, -0.5]; % invers zu 42
H(45).R = [0.309016994374947, -0.5, -0.809016994374947; -0.5, -0.809016994374947, 0.309016994374947; -0.809016994374947, 0.309016994374947, -0.5]; % selbstinvers
H(46).R = [0.309016994374947, -0.5, -0.809016994374947; 0.5, 0.809016994374947, -0.309016994374947; 0.809016994374947, -0.309016994374947, 0.5]; % invers zu 51
H(47).R = [0.309016994374947, -0.5, 0.809016994374947; -0.5, -0.809016994374947, -0.309016994374947; 0.809016994374947, -0.309016994374947, -0.5]; % selbstinvers
H(48).R = [0.309016994374947, -0.5, 0.809016994374947; 0.5, 0.809016994374947, 0.309016994374947; -0.809016994374947, 0.309016994374947, 0.5]; % invers zu 49
H(49).R = [0.309016994374947, 0.5, -0.809016994374947; -0.5, 0.809016994374947, 0.309016994374947; 0.809016994374947, 0.309016994374947, 0.5]; % invers zu 48
H(50).R = [0.309016994374947, 0.5, -0.809016994374947; 0.5, -0.809016994374947, -0.309016994374947; -0.809016994374947, -0.309016994374947, -0.5]; % selbstinvers
H(51).R = [0.309016994374947, 0.5, 0.809016994374947; -0.5, 0.809016994374947, -0.309016994374947; -0.809016994374947, -0.309016994374947, 0.5]; % invers zu 46
H(52).R = [0.309016994374947, 0.5, 0.809016994374947; 0.5, -0.809016994374947, 0.309016994374947; 0.809016994374947, 0.309016994374947, -0.5]; % selbstinvers
H(53).R = [0.809016994374947, -0.309016994374947, -0.5; -0.309016994374947, 0.5, -0.809016994374947; 0.5, 0.809016994374947, 0.309016994374947]; % invers zu 55
H(54).R = [0.809016994374947, -0.309016994374947, -0.5; 0.309016994374947, -0.5, 0.809016994374947; -0.5, -0.809016994374947, -0.309016994374947]; % invers zu 57
H(55).R = [0.809016994374947, -0.309016994374947, 0.5; -0.309016994374947, 0.5, 0.809016994374947; -0.5, -0.809016994374947, 0.309016994374947]; % invers zu 53
H(56).R = [0.809016994374947, -0.309016994374947, 0.5; 0.309016994374947, -0.5, -0.809016994374947; 0.5, 0.809016994374947, -0.309016994374947]; % invers zu 59
H(57).R = [0.809016994374947, 0.309016994374947, -0.5; -0.309016994374947, -0.5, -0.809016994374947; -0.5, 0.809016994374947, -0.309016994374947]; % invers zu 54
H(58).R = [0.809016994374947, 0.309016994374947, -0.5; 0.309016994374947, 0.5, 0.809016994374947; 0.5, -0.809016994374947, 0.309016994374947]; % invers zu 60
H(59).R = [0.809016994374947, 0.309016994374947, 0.5; -0.309016994374947, -0.5, 0.809016994374947; 0.5, -0.809016994374947, -0.309016994374947]; % invers zu 56
H(60).R = [0.809016994374947, 0.309016994374947, 0.5; 0.309016994374947, 0.5, -0.809016994374947; -0.5, 0.809016994374947, 0.309016994374947]; % invers zu 58

% -------------------------------------------------------------------------

phi = 0.5 * (1.0 + sqrt (5.0));
div_phi = 1 / phi;

c = 4.0 * pi / (sqrt (250.0 + 110.0 * sqrt (5.0)) * (sqrt (5.0) - 1.0));

tile = struct ('face_x', 0, 'face_y', 0, 'face_z', 0, 'face_center', 0);

tile(1).face_x = c * [0, 0, 1, phi, 1];
tile(1).face_y = c * [div_phi, -div_phi, -1, 0, 1];
tile(1).face_z = c * [phi, phi, 1, div_phi, 1];

tile(2).face_x = c * [0, 0, -1, -phi, -1];
tile(2).face_y = c * [div_phi, -div_phi, -1, 0, 1];
tile(2).face_z = c * [phi, phi, 1, div_phi, 1];

tile(3).face_x = c * [0, -1, -div_phi, div_phi, 1];
tile(3).face_y = c * [-div_phi, -1, -phi, -phi, -1];
tile(3).face_z = c * [phi, 1, 0, 0, 1];

tile(4).face_x = c * [0, -1, -div_phi, div_phi, 1];
tile(4).face_y = c * [div_phi, 1, phi, phi, 1];
tile(4).face_z = c * [phi, 1, 0, 0, 1];

tile(5).face_x = c * [1, phi, phi, 1, div_phi];
tile(5).face_y = c * [-1, 0, 0, -1, -phi];
tile(5).face_z = c * [1, div_phi, -div_phi, -1, 0];

tile(6).face_x = c * [-1, -phi, -phi, -1, -div_phi];
tile(6).face_y = c * [-1, 0, 0, -1, -phi];
tile(6).face_z = c * [1, div_phi, -div_phi, -1, 0];

tile(7).face_x = c * [1, phi, phi, 1, div_phi];
tile(7).face_y = c * [1, 0, 0, 1, phi];
tile(7).face_z = c * [1, div_phi, -div_phi, -1, 0];

tile(8).face_x = c * [-1, -phi, -phi, -1, -div_phi];
tile(8).face_y = c * [1, 0, 0, 1, phi];
tile(8).face_z = c * [1, div_phi, -div_phi, -1, 0];

tile(9).face_x = c * [0, 0, 1, phi, 1];
tile(9).face_y = c * [div_phi, -div_phi, -1, 0, 1];
tile(9).face_z = c * [-phi, -phi, -1, -div_phi, -1];

tile(10).face_x = c * [0, 0, -1, -phi, -1];
tile(10).face_y = c * [div_phi, -div_phi, -1, 0, 1];
tile(10).face_z = c * [-phi, -phi, -1, -div_phi, -1];

tile(11).face_x = c * [0, -1, -div_phi, div_phi, 1];
tile(11).face_y = c * [-div_phi, -1, -phi, -phi, -1];
tile(11).face_z = c * [-phi, -1, 0, 0, -1];

tile(12).face_x = c * [0, -1, -div_phi, div_phi, 1];
tile(12).face_y = c * [div_phi, 1, phi, phi, 1];
tile(12).face_z = c * [-phi, -1, 0, 0, -1];

for face_index = 1 : 12

 tile(face_index).face_center = [mean(tile(face_index).face_x), mean(tile(face_index).face_y), mean(tile(face_index).face_z)];
 
end

wedge_vert_x = [0.0, tile(1).face_x, tile(1).face_center(1)];
wedge_vert_y = [0.0, tile(1).face_y, tile(1).face_center(2)];
wedge_vert_z = [0.0, tile(1).face_z, tile(1).face_center(3)];

wedge_tri = [1, 2, 3, 7; 1, 3, 4, 7; 1, 4, 5, 7; 1, 5, 6, 7; 1, 6, 2, 7];

wedge_vert_x = [wedge_vert_x, tile(2).face_x(3 : end), tile(2).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(2).face_y(3 : end), tile(2).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(2).face_z(3 : end), tile(2).face_center(3)];

wedge_tri = [wedge_tri; 1, 3, 2, 11; 1, 2, 10, 11; 1, 10, 9, 11; 1, 9, 8, 11; 1, 8, 3, 11];

wedge_vert_x = [wedge_vert_x, tile(3).face_x([3, 4]), tile(3).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(3).face_y([3, 4]), tile(3).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(3).face_z([3, 4]), tile(3).face_center(3)];

wedge_tri = [wedge_tri; 1, 3, 8, 14; 1, 8, 12, 14; 1, 12, 13, 14; 1, 13, 4, 14; 1, 4, 3, 14];

wedge_vert_x = [wedge_vert_x, tile(4).face_x([3, 4]), tile(4).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(4).face_y([3, 4]), tile(4).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(4).face_z([3, 4]), tile(4).face_center(3)];

wedge_tri = [wedge_tri; 1, 2, 6, 17; 1, 6, 16, 17; 1, 16, 15, 17; 1, 15, 10, 17; 1, 10, 2, 17];

wedge_vert_x = [wedge_vert_x, tile(5).face_x([3, 4]), tile(5).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(5).face_y([3, 4]), tile(5).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(5).face_z([3, 4]), tile(5).face_center(3)];

wedge_tri = [wedge_tri; 1, 4, 13, 20; 1, 13, 19, 20; 1, 19, 18, 20; 1, 18, 5, 20; 1, 5, 4, 20];

wedge_vert_x = [wedge_vert_x, tile(6).face_x([3, 4]), tile(6).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(6).face_y([3, 4]), tile(6).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(6).face_z([3, 4]), tile(6).face_center(3)];

wedge_tri = [wedge_tri; 1, 8, 9, 23; 1, 9, 21, 23; 1, 21, 22, 23; 1, 22, 12, 23; 1, 12, 8, 23];

wedge_vert_x = [wedge_vert_x, tile(7).face_x(4), tile(7).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(7).face_y(4), tile(7).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(7).face_z(4), tile(7).face_center(3)];

wedge_tri = [wedge_tri; 1, 6, 5, 25; 1, 5, 18, 25; 1, 18, 24, 25; 1, 24, 16, 25; 1, 16, 6, 25];

wedge_vert_x = [wedge_vert_x, tile(8).face_x(4), tile(8).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(8).face_y(4), tile(8).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(8).face_z(4), tile(8).face_center(3)];

wedge_tri = [wedge_tri; 1, 10, 15, 27; 1, 15, 26, 27; 1, 26, 21, 27; 1, 21, 9, 27; 1, 9, 10, 27];

wedge_vert_x = [wedge_vert_x, tile(9).face_x([1, 2]), tile(9).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(9).face_y([1, 2]), tile(9).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(9).face_z([1, 2]), tile(9).face_center(3)];

wedge_tri = [wedge_tri; 1, 13, 12, 32; 1, 12, 22, 32; 1, 22, 29, 32; 1, 29, 19, 32; 1, 19, 13, 32];

wedge_vert_x = [wedge_vert_x, tile(10).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(10).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(10).face_center(3)];

wedge_tri = [wedge_tri; 1, 15, 16, 33; 1, 16, 24, 33; 1, 24, 28, 33; 1, 28, 26, 33; 1, 26, 15, 33];

wedge_vert_x = [wedge_vert_x, tile(11).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(11).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(11).face_center(3)];

wedge_tri = [wedge_tri; 1, 18, 19, 30; 1, 19, 29, 30; 1, 29, 28, 30; 1, 28, 24, 30; 1, 24, 18, 30];

wedge_vert_x = [wedge_vert_x, tile(12).face_center(1)];
wedge_vert_y = [wedge_vert_y, tile(12).face_center(2)];
wedge_vert_z = [wedge_vert_z, tile(12).face_center(3)];

wedge_tri = [wedge_tri; 1, 21, 26, 31; 1, 26, 28, 31; 1, 28, 29, 31; 1, 29, 22, 31; 1, 22, 21, 31];

wedge_TRI = triangulation (wedge_tri, wedge_vert_x', wedge_vert_y', wedge_vert_z');

end